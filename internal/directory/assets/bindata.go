// Code generated by go-bindata. DO NOT EDIT.
//  memcopy: true
//  compress: true
//  decompress: once
//  asset-dir: true
//  restore: true
// sources:
//  assets/index.html

package assets

import (
	"bytes"
	"compress/flate"
	"io"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	"github.com/tmthrgd/go-bindata/restore"
)

type asset struct {
	name string
	data string
	size int64

	once  sync.Once
	bytes []byte
	err   error
}

func (a *asset) Name() string {
	return a.name
}

func (a *asset) Size() int64 {
	return a.size
}

func (a *asset) Mode() os.FileMode {
	return 0
}

func (a *asset) ModTime() time.Time {
	return time.Time{}
}

func (*asset) IsDir() bool {
	return false
}

func (*asset) Sys() interface{} {
	return nil
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]*asset{
	"index.html": &asset{
		name: "index.html",
		data: "" +
			"\x84\x54\x51\x6b\xdb\x30\x10\x7e\xcf\xaf\xb8\xb9\x1d\xac\x50\xc7\x0d\x23\xdd\x50\x95\x3c\x6c\x4d" +
			"\xd9\x60\x6c\x63\xb4\x0f\x7b\x1a\x67\xeb\x62\x8b\xc8\x92\x91\x94\x2c\x26\xf8\xbf\x0f\xd9\x6e\x1a" +
			"\x7b\x81\xde\x3d\x44\xb9\xef\xee\xf4\xe9\xd3\xc9\xfc\xcd\xfd\x8f\xcf\x8f\xbf\x7f\xae\xa0\xf0\xa5" +
			"\x5a\x4e\x78\xf8\x01\x85\x3a\x5f\x44\xa4\xa3\x10\x20\x14\xcb\x09\x00\x00\x2f\xc9\x23\x64\x05\x5a" +
			"\x47\x7e\x11\x3d\x3d\x3e\xc4\x1f\xa3\x1e\xf2\xd2\x2b\x5a\x7e\x31\x25\x29\x4c\xe1\x5e\x5a\xca\xbc" +
			"\xb1\x35\x4f\x3a\xa0\x4b\x72\xbe\x7e\x5e\x07\x4b\x8d\xa8\xe1\x70\xfc\x1b\xac\x44\x9b\x4b\xcd\x00" +
			"\xb7\xde\xdc\x0d\x90\xbf\x52\xf8\x82\xc1\x87\xf9\xdb\x61\xbc\x42\x21\xa4\xce\x19\xcc\xa8\x1c\x22" +
			"\x6b\xa3\x7d\xbc\xc6\x52\xaa\x9a\x81\x43\xed\x62\x47\x56\xae\x87\x49\x29\x66\x9b\xdc\x9a\xad\x16" +
			"\x71\x66\x94\xb1\x0c\x2e\x56\x37\xab\x4f\x0f\xf3\x97\xb4\x66\x72\x5c\x4e\xa5\xa7\x72\x44\x59\x48" +
			"\x57\x29\xac\x19\x48\xad\xa4\xa6\x38\x55\x26\xdb\x9c\xe5\xfe\xfe\x66\xc4\xdd\xd3\xde\xc7\xa8\x64" +
			"\xae\x19\x64\xa4\x3d\xd9\x21\xde\x33\xb2\x79\x8a\xef\x6e\xae\x83\x4f\x6f\xe7\x57\xa3\x03\x18\x2b" +
			"\xc8\x32\x98\x55\x7b\x70\x46\x49\x01\x17\x74\x1b\xfc\x5c\x5a\x6c\x51\xc8\xad\x63\x30\x9b\x57\xfb" +
			"\x57\x85\x58\xcf\x83\xdf\x9d\xbd\xa0\x81\xda\x63\x85\x58\x61\x76\x64\x47\x3a\xfd\x4f\x34\xb7\x58" +
			"\xbf\x76\xe0\xd9\xd5\xd9\x6d\x70\xd4\xbc\x55\x52\x50\x66\x2c\x7a\x69\x34\x03\x6d\x34\x9d\x56\xb6" +
			"\xf3\x97\xf4\x03\xc8\x93\x6e\xa8\x79\x98\xc0\xe5\xe4\x70\x00\x8b\x3a\x27\xb8\x94\xd7\x70\xd9\x5e" +
			"\x31\x5b\xc0\xf4\xab\xa7\xd2\x41\xd3\xd7\x22\x14\x96\xd6\x8b\xe8\x70\xe8\x52\xa6\x4f\xbf\xbe\x41" +
			"\xd3\x44\xe0\x31\x95\x5a\xd0\xbe\x85\xa4\xce\xe0\x52\xf6\x71\x9b\x87\x67\xf2\x27\x55\xa8\x37\xd1" +
			"\xcb\xd8\x73\x21\x77\x90\x29\x74\x6e\x11\x85\x4e\x27\x50\x0b\x17\xb3\x61\x20\xd8\x71\xd7\xef\x58" +
			"\xd2\x33\xa7\x63\x45\x32\x2e\xe1\xd5\xf2\x58\x71\x4f\x2e\xb3\xb2\x0a\xb2\x40\xd3\xf0\xa4\x3a\x61" +
			"\x92\x08\xb9\xeb\xdf\x66\x82\xad\x10\xa4\x45\x68\xcf\x93\x4e\x1a\x9e\x74\x9f\x85\x7f\x01\x00\x00" +
			"\xff\xff",
		size: 1063,
	},
}

// AssetAndInfo loads and returns the asset and asset info for the
// given name. It returns an error if the asset could not be found
// or could not be loaded.
func AssetAndInfo(name string) ([]byte, os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	a.once.Do(func() {
		fr := flate.NewReader(strings.NewReader(a.data))

		var buf bytes.Buffer
		if _, a.err = io.Copy(&buf, fr); a.err != nil {
			return
		}

		if a.err = fr.Close(); a.err == nil {
			a.bytes = buf.Bytes()
		}
	})
	if a.err != nil {
		return nil, nil, &os.PathError{Op: "read", Path: name, Err: a.err}
	}

	return a.bytes, a, nil
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	data, _, err := AssetAndInfo(name)
	return data, err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}

	return names
}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	return restore.Asset(dir, name, AssetAndInfo)
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	return restore.Assets(dir, name, AssetDir, AssetAndInfo)
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree

	if name != "" {
		var ok bool
		for _, p := range strings.Split(filepath.ToSlash(name), "/") {
			if node, ok = node[p]; !ok {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}

	if len(node) == 0 {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	rv := make([]string, 0, len(node))
	for name := range node {
		rv = append(rv, name)
	}

	return rv, nil
}

type bintree map[string]bintree

var _bintree = bintree{
	"index.html": bintree{},
}
