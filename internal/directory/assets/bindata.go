// Code generated by go-bindata. DO NOT EDIT.
//  memcopy: true
//  compress: true
//  decompress: once
//  asset-dir: true
//  restore: true
// sources:
//  assets/index.html

package assets

import (
	"bytes"
	"compress/flate"
	"io"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	"github.com/tmthrgd/go-bindata/restore"
)

type asset struct {
	name string
	data string
	size int64

	once  sync.Once
	bytes []byte
	err   error
}

func (a *asset) Name() string {
	return a.name
}

func (a *asset) Size() int64 {
	return a.size
}

func (a *asset) Mode() os.FileMode {
	return 0
}

func (a *asset) ModTime() time.Time {
	return time.Time{}
}

func (*asset) IsDir() bool {
	return false
}

func (*asset) Sys() interface{} {
	return nil
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]*asset{
	"index.html": &asset{
		name: "index.html",
		data: "" +
			"\xb4\x54\x4f\x6b\xdb\x4e\x10\xbd\xfb\x53\x4c\x44\x7e\x90\x80\x25\xc5\xf9\x11\x12\x54\xd9\x97\xa6" +
			"\xa5\x85\xd2\x96\x92\x1c\x7a\x2a\xa3\xdd\x89\xb4\x78\xff\x88\xdd\x49\x62\x23\xfc\xdd\xcb\x4a\x6a" +
			"\x62\x0b\x17\x7a\x68\xed\x83\xa4\xf7\xde\xbc\x9d\xd1\xcc\xa8\x3c\xb9\xfd\xf2\xf6\xee\xfb\xd7\x77" +
			"\xd0\xb0\xd1\xab\x59\x19\x2f\xa0\xd1\xd6\xcb\x84\x6c\x12\x01\x42\xb9\x9a\x01\x00\x94\x86\x18\x41" +
			"\x34\xe8\x03\xf1\x32\xb9\xbf\x7b\x9f\xde\x24\x23\xc5\x8a\x35\xad\x3e\x38\x43\x1a\x2b\xb8\x55\x9e" +
			"\x04\x3b\xbf\x2d\xf3\x81\x18\x44\x5a\xd9\x35\x78\xd2\xcb\x24\xf0\x56\x53\x68\x88\x38\x81\xc6\xd3" +
			"\xc3\x32\x69\x98\xdb\x50\xe4\xf9\xa3\x6d\xd7\x75\x26\x9c\xc9\x43\x4b\x82\x3d\x65\x22\x84\x5c\xaa" +
			"\xc0\x2f\x80\x51\x36\x82\xc9\x5f\x75\x4d\x69\xd3\xfe\x23\x67\x25\x9c\x0d\x13\x6f\x28\x7b\xcb\xf1" +
			"\x01\x00\x10\xba\x97\xfb\xf8\x93\x2a\xb4\x1a\xb7\x85\xb2\x5a\x59\x4a\x2b\xed\xc4\xfa\xcd\x81\xe2" +
			"\x59\x49\x6e\x8a\xc5\xc5\xc5\x7f\x87\x78\x43\xaa\x6e\xf8\x08\xc1\xb4\xe1\x54\x92\x70\x1e\x59\x39" +
			"\x5b\x80\x75\x96\xe0\x44\x99\xd6\x79\x46\xcb\xaf\xea\xdd\xec\x35\xaf\xa2\x71\x4f\xe4\x27\xd9\x55" +
			"\x6e\x93\x86\x06\xa5\x7b\x2e\xe0\x62\xf8\x67\x0b\x4f\x06\x7c\x5d\xe1\xd9\xcd\xf5\xfc\xe6\x6a\x7e" +
			"\xb9\xb8\x9e\x67\x97\xe7\x47\x5d\xb3\xda\x2b\xf9\x9b\x8a\x21\x72\x87\x99\x47\x24\x65\x32\xad\x46" +
			"\xa6\x54\x38\xfd\x68\x6c\x28\xc0\x53\x4b\xc8\x67\xff\xcf\x61\xf1\xe0\xcf\x27\x21\xd8\x16\xb0\x20" +
			"\x73\x88\xb6\x28\xa5\xb2\xf5\x84\xd9\x0d\xed\xce\xc7\x96\x94\xf9\x30\xf3\x65\xe5\xe4\x76\x35\x2b" +
			"\xa5\x7a\x02\xa1\x31\x84\x65\x12\x13\x19\x3b\xd8\x75\xe0\xd1\xd6\x04\xa7\x6a\x0e\xa7\x8a\xc9\x40" +
			"\xb1\x84\xec\x23\x93\x09\xb0\x1b\x2d\xf7\x42\x05\xfa\x5f\xa1\x3d\x85\xe3\x20\x75\xdd\x10\x9d\xdd" +
			"\x7f\xfb\x04\xbb\x5d\x02\x8c\x95\xb2\x92\x36\x3d\xa5\xac\x80\x53\x35\xe2\xbe\x8e\x7b\xf7\xa3\xd2" +
			"\x68\xd7\x09\xf4\x9b\xb5\x17\xff\x19\x0d\x45\xe1\xea\xa0\xe2\x69\x0a\x69\xac\x8d\xfc\x44\x75\x54" +
			"\xd9\x1f\x00\xcd\x55\xb2\x9a\x9e\x51\xe6\x52\x3d\xfd\x81\x43\x78\xac\x06\x93\x7e\xf4\x6a\x8f\xdb" +
			"\x3d\xaf\x5b\x0a\xc2\xab\x36\x8e\xe2\x71\xcb\x09\x54\xe6\x38\xee\xe5\x2b\xde\x75\x40\x56\xc6\xd7" +
			"\x3d\x82\x65\x3e\x36\x2d\x1f\xbe\x67\x3f\x03\x00\x00\xff\xff",
		size: 1248,
	},
}

// AssetAndInfo loads and returns the asset and asset info for the
// given name. It returns an error if the asset could not be found
// or could not be loaded.
func AssetAndInfo(name string) ([]byte, os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	a.once.Do(func() {
		fr := flate.NewReader(strings.NewReader(a.data))

		var buf bytes.Buffer
		if _, a.err = io.Copy(&buf, fr); a.err != nil {
			return
		}

		if a.err = fr.Close(); a.err == nil {
			a.bytes = buf.Bytes()
		}
	})
	if a.err != nil {
		return nil, nil, &os.PathError{Op: "read", Path: name, Err: a.err}
	}

	return a.bytes, a, nil
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	data, _, err := AssetAndInfo(name)
	return data, err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}

	return names
}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	return restore.Asset(dir, name, AssetAndInfo)
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	return restore.Assets(dir, name, AssetDir, AssetAndInfo)
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree

	if name != "" {
		var ok bool
		for _, p := range strings.Split(filepath.ToSlash(name), "/") {
			if node, ok = node[p]; !ok {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}

	if len(node) == 0 {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	rv := make([]string, 0, len(node))
	for name := range node {
		rv = append(rv, name)
	}

	return rv, nil
}

type bintree map[string]bintree

var _bintree = bintree{
	"index.html": bintree{},
}
