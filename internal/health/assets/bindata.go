// Code generated by go-bindata. DO NOT EDIT.
//  memcopy: true
//  compress: true
//  decompress: once
//  asset-dir: true
//  restore: true
// sources:
//  assets/index.gohtml

package assets

import (
	"bytes"
	"compress/flate"
	"io"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	"github.com/tmthrgd/go-bindata/restore"
)

type asset struct {
	name string
	data string
	size int64

	once  sync.Once
	bytes []byte
	err   error
}

func (a *asset) Name() string {
	return a.name
}

func (a *asset) Size() int64 {
	return a.size
}

func (a *asset) Mode() os.FileMode {
	return 0
}

func (a *asset) ModTime() time.Time {
	return time.Time{}
}

func (*asset) IsDir() bool {
	return false
}

func (*asset) Sys() interface{} {
	return nil
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]*asset{
	"index.gohtml": &asset{
		name: "index.gohtml",
		data: "" +
			"\xd4\x96\x41\x4f\xdc\x3c\x10\x86\xef\xfb\x2b\xe6\xb3\xf8\x24\x90\x48\x02\x42\xa8\x55\x9a\xe4\x02" +
			"\xad\x38\xb5\x1c\x68\xa5\x1e\xbd\xf6\x90\x58\xd8\x8e\x65\xcf\x22\x56\x51\xfe\x7b\xe5\x4d\x0a\x21" +
			"\x84\xf6\xb0\xad\x2a\x72\xd8\x8d\xdf\x99\x79\xec\x79\x6d\x59\x29\xfe\xbb\xfc\x72\x71\xf3\xfd\xfa" +
			"\x23\x34\x64\x74\xb5\x2a\xe2\x1f\x68\x6e\xeb\x92\xa1\x65\x51\x40\x2e\xab\x15\x00\x40\x61\x90\x38" +
			"\x88\x86\xfb\x80\x54\xb2\xaf\x37\x9f\x92\xf7\x6c\x0c\x91\x22\x8d\xd5\x55\x6b\x50\xf3\x35\x5c\x21" +
			"\xd7\xd4\x14\xd9\xa0\x0e\x19\x5a\xd9\x3b\xf0\xa8\x4b\x16\x68\xab\x31\x34\x88\xc4\xa0\xf1\x78\x5b" +
			"\xb2\x86\xc8\x85\x3c\xcb\x36\xd6\xdd\xd5\xa9\x68\x4d\x16\x1c\x0a\xf2\x98\x8a\x10\x32\xa9\x02\x3d" +
			"\x0a\x46\xd9\x28\xb2\x3f\x4a\x4d\xf0\xc1\xfd\x25\xb2\x12\xad\x0d\x73\xf6\x8e\x38\xbc\xc7\x27\xad" +
			"\xbd\x92\xd0\x3d\x8e\xe3\x23\x55\x70\x9a\x6f\x73\x88\xb1\x0f\xcf\x42\x51\x49\x08\x8d\xd3\x9c\x30" +
			"\x11\xad\xde\x18\x1b\x72\xf0\xe8\x90\xd3\xe1\xd9\x31\x18\x65\x0d\x7f\x38\x3c\x3b\xfb\xff\x18\x4e" +
			"\x6f\xfd\xd1\xd1\xac\x9e\xbb\x1c\x4e\xd1\x3c\x57\x1d\x97\x52\xd9\x7a\x16\xe9\x57\x4f\xab\x24\xa5" +
			"\x71\xf7\x93\x08\xb4\x84\x1e\xe7\x6b\x36\xdc\xd7\xca\xe6\x90\xbe\x3b\xf7\x68\xe0\x64\x8a\xd9\xf5" +
			"\x9d\x8d\x8d\x17\xd9\x70\xaa\x8a\x75\x2b\xb7\xd5\xaa\x90\xea\x1e\x84\xe6\x21\x94\x2c\x36\x37\xda" +
			"\xd4\x75\xe0\xb9\xad\x11\x0e\xd4\x31\x1c\x28\x42\x03\x79\x09\x29\xf4\x23\x6d\x52\xe5\xb8\x45\xcd" +
			"\x9e\x1c\x7d\x11\x4b\xe2\x84\xe8\x23\x53\xdd\x0e\xb0\x74\x38\xa5\x5b\xe8\xfb\x75\x9d\x84\x8d\x10" +
			"\x18\x42\xd7\x01\xea\x80\x83\x86\xde\xb7\x3e\x2a\x56\x42\xdf\x4f\xf0\xcb\x53\xec\x4e\x3b\x34\xe7" +
			"\x60\x28\x39\x3d\x61\x55\xd7\x8d\x13\x5d\xb7\xf2\x33\x37\x11\x5a\x64\x52\xdd\xff\x8e\x13\x36\xeb" +
			"\x1d\x6a\x42\x88\xe5\xc1\x71\xb1\xc0\x98\x0f\x5f\xe0\xa2\xc7\xbf\x58\x7b\xdc\x50\x78\xb6\xab\xb3" +
			"\xe4\xa5\x82\x44\xb4\x96\xd0\xd2\x42\xea\x62\xfa\x60\x0d\xe1\x03\x25\xeb\x56\x4b\x56\xc5\x86\x16" +
			"\xcc\x78\x15\xf0\x8a\x27\xcb\x96\x2e\xd8\xf2\x9a\xf4\xcf\x8d\xb8\xc4\x20\xbc\x72\xa4\x5a\xbb\xa7" +
			"\x1f\x13\xd2\xdb\xb7\xe5\x1b\xfa\xb0\xbf\x25\x23\xe5\xed\xdb\x71\xd1\x1a\xa7\x34\xca\x3d\xfd\xf8" +
			"\x89\xd9\xc7\x90\xc9\x70\xf2\xfa\x78\x4b\xae\x46\xb1\xc8\xc6\xbb\x3d\x1b\x3e\x2c\x7e\x04\x00\x00" +
			"\xff\xff",
		size: 2153,
	},
}

// AssetAndInfo loads and returns the asset and asset info for the
// given name. It returns an error if the asset could not be found
// or could not be loaded.
func AssetAndInfo(name string) ([]byte, os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	a.once.Do(func() {
		fr := flate.NewReader(strings.NewReader(a.data))

		var buf bytes.Buffer
		if _, a.err = io.Copy(&buf, fr); a.err != nil {
			return
		}

		if a.err = fr.Close(); a.err == nil {
			a.bytes = buf.Bytes()
		}
	})
	if a.err != nil {
		return nil, nil, &os.PathError{Op: "read", Path: name, Err: a.err}
	}

	return a.bytes, a, nil
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	data, _, err := AssetAndInfo(name)
	return data, err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}

	return names
}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	return restore.Asset(dir, name, AssetAndInfo)
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	return restore.Assets(dir, name, AssetDir, AssetAndInfo)
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree

	if name != "" {
		var ok bool
		for _, p := range strings.Split(filepath.ToSlash(name), "/") {
			if node, ok = node[p]; !ok {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}

	if len(node) == 0 {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	rv := make([]string, 0, len(node))
	for name := range node {
		rv = append(rv, name)
	}

	return rv, nil
}

type bintree map[string]bintree

var _bintree = bintree{
	"index.gohtml": bintree{},
}
