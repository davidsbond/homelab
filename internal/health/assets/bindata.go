// Code generated by go-bindata. DO NOT EDIT.
//  memcopy: true
//  compress: true
//  decompress: once
//  asset-dir: true
//  restore: true
// sources:
//  assets/index.gohtml

package assets

import (
	"bytes"
	"compress/flate"
	"io"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	"github.com/tmthrgd/go-bindata/restore"
)

type asset struct {
	name string
	data string
	size int64

	once  sync.Once
	bytes []byte
	err   error
}

func (a *asset) Name() string {
	return a.name
}

func (a *asset) Size() int64 {
	return a.size
}

func (a *asset) Mode() os.FileMode {
	return 0
}

func (a *asset) ModTime() time.Time {
	return time.Time{}
}

func (*asset) IsDir() bool {
	return false
}

func (*asset) Sys() interface{} {
	return nil
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]*asset{
	"index.gohtml": &asset{
		name: "index.gohtml",
		data: "" +
			"\xd4\x96\x4f\x8b\xdb\x3c\x10\xc6\xef\xf9\x14\xf3\x8a\x3d\xbc\x85\x75\xdc\x50\x0a\x25\xb5\x7d\xd9" +
			"\x6d\xd9\x53\xbb\x87\x6d\xa1\x47\x45\x9a\xd8\x62\xf5\x0f\x69\xb2\x6c\x30\xfe\xee\x45\xb1\x9b\x7a" +
			"\xbd\x4e\x7b\x48\x4b\x59\x1d\x12\xe9\x99\x99\x9f\x46\x0f\x42\xb8\xf8\xef\xfa\xf3\xd5\xdd\xb7\xdb" +
			"\x0f\xd0\x90\xd1\xd5\xa2\x48\x7f\xa0\xb9\xad\x4b\x86\x96\x25\x01\xb9\xac\x16\x00\x00\x85\x41\xe2" +
			"\x20\x1a\x1e\x22\x52\xc9\xbe\xdc\x7d\xcc\xde\xb1\x21\x44\x8a\x34\x56\x37\xce\xa0\xe6\x1b\xb8\x41" +
			"\xae\xa9\x29\xf2\x5e\xed\x33\xb4\xb2\xf7\x10\x50\x97\x2c\xd2\x5e\x63\x6c\x10\x89\x41\x13\x70\x5b" +
			"\xb2\x86\xc8\xc7\x75\x9e\xef\xac\xbf\xaf\x97\xc2\x99\x3c\x7a\x14\x14\x70\x29\x62\xcc\xa5\x8a\x74" +
			"\x14\x8c\xb2\x49\x64\x7f\x94\x9a\xe1\xa3\xff\x4b\x64\x25\x9c\x8d\x53\xf6\x81\xd8\xcf\xd3\x58\xd6" +
			"\x41\x49\x68\x8f\xeb\x34\xa4\x8a\x5e\xf3\xfd\x1a\x52\xec\xfd\x93\x50\x52\x32\x42\xe3\x35\x27\xcc" +
			"\x84\xd3\x3b\x63\xe3\x1a\x02\x7a\xe4\xf4\xff\x9b\x4b\x58\x6d\xc3\xab\x49\x09\xf7\x6b\x58\xa1\x79" +
			"\xaa\x7a\x2e\xa5\xb2\xf5\x24\xd2\xf5\x3d\xe6\x43\x93\x45\xde\xdf\x80\x62\xe3\xe4\xbe\x5a\x14\x52" +
			"\x3d\x80\xd0\x3c\xc6\x92\xa5\x46\x86\x23\xb5\x2d\x04\x6e\x6b\x84\x0b\x75\x09\x17\x8a\xd0\xc0\xba" +
			"\x84\x25\x74\x03\x6d\x54\xe5\xb9\x45\xcd\x7e\x9e\xfe\x59\x2c\x4b\x1b\x62\x48\x4c\xb5\xed\x61\xcb" +
			"\xfe\x46\xed\xa1\xeb\x36\x75\x16\x77\x42\x60\x8c\x6d\x0b\xa8\x23\xf6\x1a\x86\xe0\x42\x52\xac\x84" +
			"\xae\x1b\xe1\xe7\xb7\x38\xdc\x4c\x68\xde\x82\xa1\x6c\xf5\x9a\x55\x6d\x3b\x6c\x74\xeb\xe4\x27\x6e" +
			"\x12\xb4\xc8\xa5\x7a\xf8\x1d\x27\xee\x36\x07\xd4\x88\x90\xca\xa3\xe7\x62\x86\x31\x5d\x3e\xc3\x25" +
			"\x8f\x7f\xd1\x3b\x29\x8d\x90\x7e\x32\x81\x96\x30\xa0\x9c\x24\xcf\x15\x64\xc2\x59\x42\x4b\x33\xa9" +
			"\xb3\xe9\xbd\x35\x84\x8f\x94\x6d\x9c\x96\xac\x4a\x07\x9a\x31\xe3\x24\xe0\x84\x27\xf3\x96\xce\xd8" +
			"\x72\x4a\xfa\xe7\x46\x5c\x63\x14\x41\x79\x52\xce\x9e\xe9\xc7\x88\xf4\xf2\x6d\xf9\x8a\x21\x9e\x6f" +
			"\xc9\x40\x79\xf9\x76\x5c\x39\xe3\x95\x46\x79\xa6\x1f\x3f\x30\xe7\x18\x32\x5a\x8e\xa6\xc7\x57\x72" +
			"\x31\x88\x45\x3e\xbc\xed\x79\xff\x11\xf0\x3d\x00\x00\xff\xff",
		size: 2069,
	},
}

// AssetAndInfo loads and returns the asset and asset info for the
// given name. It returns an error if the asset could not be found
// or could not be loaded.
func AssetAndInfo(name string) ([]byte, os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	a.once.Do(func() {
		fr := flate.NewReader(strings.NewReader(a.data))

		var buf bytes.Buffer
		if _, a.err = io.Copy(&buf, fr); a.err != nil {
			return
		}

		if a.err = fr.Close(); a.err == nil {
			a.bytes = buf.Bytes()
		}
	})
	if a.err != nil {
		return nil, nil, &os.PathError{Op: "read", Path: name, Err: a.err}
	}

	return a.bytes, a, nil
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	data, _, err := AssetAndInfo(name)
	return data, err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}

	return names
}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	return restore.Asset(dir, name, AssetAndInfo)
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	return restore.Assets(dir, name, AssetDir, AssetAndInfo)
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree

	if name != "" {
		var ok bool
		for _, p := range strings.Split(filepath.ToSlash(name), "/") {
			if node, ok = node[p]; !ok {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}

	if len(node) == 0 {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	rv := make([]string, 0, len(node))
	for name := range node {
		rv = append(rv, name)
	}

	return rv, nil
}

type bintree map[string]bintree

var _bintree = bintree{
	"index.gohtml": bintree{},
}
